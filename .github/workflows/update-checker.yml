name: Update Release JSON

on:
  release:
    types: [published]
  workflow_dispatch: # Allows manual trigger

permissions:
  contents: write

jobs:
  update-json:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Fetch latest release info
        run: |
          # Fetch latest release from GitHub API
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/CyberGutta/AkademiTrack/releases/latest")
          
          # Extract relevant information
          VERSION=$(echo "$RESPONSE" | jq -r '.tag_name')
          DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r '.assets[0].browser_download_url // empty')
          NOTES=$(echo "$RESPONSE" | jq -r '.body // "No release notes available"')
          PUBLISHED_AT=$(echo "$RESPONSE" | jq -r '.published_at')
          
          echo "Found release: $VERSION"
          
          # If no assets, use zipball_url as fallback
          if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" = "null" ]; then
            DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r '.zipball_url')
            echo "Using zipball URL as fallback"
          fi
          
          # Create JSON content with proper escaping
          jq -n \
            --arg version "$VERSION" \
            --arg url "$DOWNLOAD_URL" \
            --arg notes "$NOTES" \
            --arg published "$PUBLISHED_AT" \
            '{
              latest_version: $version,
              download_url: $url,
              notes: $notes,
              published_at: $published
            }' > update.json
          
          echo "âœ… Generated update.json"
          cat update.json
          
      - name: Commit and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add update.json
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ðŸ¤– Update release info to $(jq -r '.latest_version' update.json) [skip ci]"
            git push
            echo "âœ… Release info updated"
          fi
