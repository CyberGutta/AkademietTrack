name: Update JSON Generator
on:
  schedule:
    # Runs every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch: # Allows manual trigger
permissions:
  contents: write
jobs:
  update-json:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Fetch latest release info
        id: release
        run: |
          # Fetch latest release from your APP repo
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/CyberGutta/AkademiTrack/releases/latest")
          
          # Extract relevant information
          VERSION=$(echo "$RESPONSE" | jq -r '.tag_name')
          DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r '.assets[0].browser_download_url // empty')
          NOTES=$(echo "$RESPONSE" | jq -r '.body // "No release notes available"')
          PUBLISHED_AT=$(echo "$RESPONSE" | jq -r '.published_at')
          
          # If no assets, use zipball_url as fallback
          if [ -z "$DOWNLOAD_URL" ]; then
            DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r '.zipball_url')
          fi
          
          # Create new JSON content
          cat > update.json.new << EOF
          {
            "latest_version": "$VERSION",
            "download_url": "$DOWNLOAD_URL",
            "notes": $(echo "$NOTES" | jq -Rs .),
            "published_at": "$PUBLISHED_AT"
          }
          EOF
          
          # Pretty print the JSON
          jq . update.json.new > update.json.tmp && mv update.json.tmp update.json.new
          
          # Check if update.json exists and compare
          if [ -f update.json ]; then
            # Compare the files (excluding any whitespace differences)
            if diff -w update.json update.json.new > /dev/null; then
              echo "No changes detected"
              echo "HAS_CHANGES=false" >> $GITHUB_ENV
            else
              echo "Changes detected"
              echo "HAS_CHANGES=true" >> $GITHUB_ENV
              mv update.json.new update.json
            fi
          else
            echo "First run - creating update.json"
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
            mv update.json.new update.json
          fi
          
      - name: Commit and push if changed
        if: env.HAS_CHANGES == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add update.json
          git commit -m "Update release info to ${{ steps.release.outputs.VERSION }}"
          git push
